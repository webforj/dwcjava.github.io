"use strict";(self.webpackChunkdwcj_documentation=self.webpackChunkdwcj_documentation||[]).push([[4091],{24282:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"components/fields/number-field","title":"NumberField","description":"A component that provides a default browser-based input field for entering numeric values, with built-in controls for incrementing or decrementing the value.","source":"@site/docs/components/fields/number-field.md","sourceDirName":"components/fields","slug":"/components/fields/numberfield","permalink":"/docs/components/fields/numberfield","draft":false,"unlisted":false,"editUrl":"https://github.com/webforj/webforj-docs/tree/website/docs/components/fields/number-field.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"NumberField","slug":"numberfield","description":"A component that provides a default browser-based input field for entering numeric values, with built-in controls for incrementing or decrementing the value."},"sidebar":"documentationSidebar","previous":{"title":"TextField","permalink":"/docs/components/fields/textfield"},"next":{"title":"PasswordField","permalink":"/docs/components/fields/passwordfield"}}');var s=i(74848),r=i(28453);const o={sidebar_position:3,title:"NumberField",slug:"numberfield",description:"A component that provides a default browser-based input field for entering numeric values, with built-in controls for incrementing or decrementing the value."},a=void 0,l={},c=[{value:"Usages",id:"usages",level:2},{value:"Maximum and minimum",id:"maximum-and-minimum",level:2},{value:"Granularity",id:"granularity",level:2},{value:"Placeholder text",id:"placeholder-text",level:2},{value:"Best practices",id:"best-practices",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{ComponentDemo:i,DocChip:t,JavadocLink:o,ParentLink:a}=n;return i||h("ComponentDemo",!0),t||h("DocChip",!0),o||h("JavadocLink",!0),a||h("ParentLink",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t,{chip:"shadow"}),"\n",(0,s.jsx)(t,{chip:"name",label:"dwc-field"}),"\n",(0,s.jsx)(o,{type:"foundation",location:"com/webforj/component/field/NumberField",top:"true"}),"\n",(0,s.jsx)(a,{parent:"Field"}),"\n",(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:"NumberField"})," component to accept numerical input from a user. It ensures that only valid numeric values are entered and provides a convenient interface for inputting numbers."]}),"\n",(0,s.jsx)(i,{path:"https://demo.webforj.com/webapp/controlsamples/numberfield?",javaE:"https://raw.githubusercontent.com/webforj/webforj-docs-samples/refs/heads/main/src/main/java/com/webforj/samples/views/fields/numberfield/NumberFieldView.java"}),"\n",(0,s.jsx)(n.h2,{id:"usages",children:"Usages"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"NumberField"})," is best used in scenarios where capturing, displaying, or manipulating numerical data is essential to your app. Here are some examples of when to use the ",(0,s.jsx)(n.code,{children:"NumberField"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Numeric Input Forms"}),": When designing forms that require numeric inputs, using a ",(0,s.jsx)(n.code,{children:"NumberField"})," simplifies the input process for users. This is particularly useful for applications that collect user data or require numerical values."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Data Analysis and Calculations"}),": A ",(0,s.jsx)(n.code,{children:"NumberField"})," is particularly valuable in apps that involve data analysis, calculations, or mathematical operations. They allow users to input or manipulate numeric values accurately."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Financial and Budgeting Applications"}),": Apps that involve financial calculations, budgeting, or tracking expenses often require precise numeric inputs. A ",(0,s.jsx)(n.code,{children:"NumberField"})," ensures accurate entry of financial figures."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Measurement and Unit Conversion"}),": In apps that deal with measurements or unit conversions, the ",(0,s.jsx)(n.code,{children:"NumberField"})," is ideal for inputting numerical values with units such as length, weight, or volume."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"maximum-and-minimum",children:"Maximum and minimum"}),"\n",(0,s.jsxs)(n.p,{children:["With the ",(0,s.jsx)(n.code,{children:"setMax()"})," and ",(0,s.jsx)(n.code,{children:"setMin()"})," methods, you can specify a range of acceptable numbers. If a user manually enters a value into the number field outside the specified range, the component will let the user know what's acceptable. Also, if a maximum or minimum is already set, the value for the other method must be lower or higher respectively."]}),"\n",(0,s.jsx)(n.h2,{id:"granularity",children:"Granularity"}),"\n",(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:"setStep()"})," method to specify the granularity that the value must adhere to when using arrow keys to modify the value. This will increment or decrement the component's value by a certain step each time. This doesn't apply when a user enters a value directly, but only when interacting with the ",(0,s.jsx)(n.code,{children:"NumberField"})," using the arrow keys."]}),"\n",(0,s.jsx)(n.h2,{id:"placeholder-text",children:"Placeholder text"}),"\n",(0,s.jsxs)(n.p,{children:["You can set placeholder text for the ",(0,s.jsx)(n.code,{children:"NumberField"})," using the ",(0,s.jsx)(n.code,{children:"setPlaceholder()"})," method. The placeholder text is displayed when the field is empty, helping to prompt the user to enter appropriate input into the ",(0,s.jsx)(n.code,{children:"NumberField"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"If the numeric input relates to a specific unit of measurement or has a particular context, provide clear labeling or additional information to guide users and ensure accurate input."})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,s.jsxs)(n.p,{children:["To ensure a seamless integration and optimal user experience, consider the following best practices when using the ",(0,s.jsx)(n.code,{children:"NumberField"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Accessibility"}),": Utilize the ",(0,s.jsx)(n.code,{children:"NumberField"})," component with accessibility in mind, adhering to accessibility standards such as proper labeling, keyboard navigation support, and compatibility with assistive technologies. Ensure that users with disabilities can interact with the ",(0,s.jsx)(n.code,{children:"NumberField"})," effectively."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Utilize Increment/Decrement Buttons"}),": If appropriate for your app, consider utilizing increment and decrement buttons with the ",(0,s.jsx)(n.code,{children:"NumberField"}),". This allows users to adjust the numeric value by a specific increment or decrement with a single click."]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(96540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);