"use strict";(self.webpackChunkdwcj_documentation=self.webpackChunkdwcj_documentation||[]).push([[9144],{3293:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var i=o(4848),s=o(8453);const t={sidebar_position:3,title:"Confirm"},r="Confirm Dialog",l={id:"components/option-dialogs/confirm",title:"Confirm",description:"A ConfirmDialog is a modal dialog designed to allow the user to choose one of a set of up to 3 options. The dialog blocks app execution until the user interacts with it or it closes due to a timeout.",source:"@site/docs/components/option-dialogs/confirm.md",sourceDirName:"components/option-dialogs",slug:"/components/option-dialogs/confirm",permalink:"/docs/components/option-dialogs/confirm",draft:!1,unlisted:!1,editUrl:"https://github.com/webforj/webforj-docs/tree/website/docs/components/option-dialogs/confirm.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Confirm"},sidebar:"documentationSidebar",previous:{title:"Message",permalink:"/docs/components/option-dialogs/message"},next:{title:"Input",permalink:"/docs/components/option-dialogs/input"}},c={},d=[{value:"Usages",id:"usages",level:2},{value:"Types",id:"types",level:2},{value:"Option type",id:"option-type",level:3},{value:"Message type",id:"message-type",level:3},{value:"Result",id:"result",level:2},{value:"Default button",id:"default-button",level:2},{value:"Buttons text",id:"buttons-text",level:2},{value:"HTML processing",id:"html-processing",level:2},{value:"Timeout",id:"timeout",level:2},{value:"Best practices",id:"best-practices",level:2},{value:"Styling",id:"styling",level:2},{value:"Shadow parts",id:"shadow-parts",level:3},{value:"Reflected attributes",id:"reflected-attributes",level:3}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components},{ComponentDemo:t,DocChip:r,JavadocLink:l,TableBuilder:c}=n;return t||u("ComponentDemo",!0),r||u("DocChip",!0),l||u("JavadocLink",!0),c||u("TableBuilder",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"confirm-dialog",children:"Confirm Dialog"}),"\n",(0,i.jsx)(r,{chip:"shadow"}),"\n",(0,i.jsx)(r,{chip:"name",label:"dwc-dialog"}),"\n",(0,i.jsx)(l,{type:"ConfirmDialog",location:"com/webforj/component/optiondialog/ConfirmDialog",top:"true"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"ConfirmDialog"})," is a modal dialog designed to allow the user to choose one of a set of up to 3 options. The dialog blocks app execution until the user interacts with it or it closes due to a timeout."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'ConfirmDialog.Result result = OptionDialog.showConfirmDialog(\n    "Do you confirm?",\n    "Confirmation",\n    ConfirmDialog.OptionType.OK_CANCEL,\n    ConfirmDialog.MessageType.QUESTION);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"usages",children:"Usages"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ConfirmDialog"})," provides a way to ask users for confirmation or to choose between multiple options, such as ",(0,i.jsx)(n.code,{children:"Yes/No"})," or ",(0,i.jsx)(n.code,{children:"OK/Cancel"}),", ensuring that they acknowledge and confirm their actions."]}),"\n",(0,i.jsx)(t,{path:"https://demo.webforj.com/webapp/controlsamples/confirmdialogconstructor?",javaE:"https://raw.githubusercontent.com/webforj/webforj-docs-samples/refs/heads/main/src/main/java/com/webforj/samples/views/optiondialog/confirm/ConfirmDialogConstructorView.java",height:"350px"}),"\n",(0,i.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,i.jsx)(n.h3,{id:"option-type",children:"Option type"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ConfirmDialog"})," supports the following option types, which determine the buttons displayed in the dialog:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"OK"})}),": Displays an ",(0,i.jsx)(n.code,{children:"OK"})," button."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"OK_CANCEL"})}),": Displays ",(0,i.jsx)(n.code,{children:"OK"})," and ",(0,i.jsx)(n.code,{children:"Cancel"})," buttons."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ABORT_RETRY_IGNORE"})}),": Displays ",(0,i.jsx)(n.code,{children:"Abort"}),", ",(0,i.jsx)(n.code,{children:"Retry"}),", and ",(0,i.jsx)(n.code,{children:"Ignore"})," buttons."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"YES_NO_CANCEL"})}),": Displays ",(0,i.jsx)(n.code,{children:"Yes"}),", ",(0,i.jsx)(n.code,{children:"No"}),", and ",(0,i.jsx)(n.code,{children:"Cancel"})," buttons."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"YES_NO"})}),": Displays ",(0,i.jsx)(n.code,{children:"Yes"})," and ",(0,i.jsx)(n.code,{children:"No"})," buttons."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"RETRY_CANCEL"})}),": Displays ",(0,i.jsx)(n.code,{children:"Retry"})," and ",(0,i.jsx)(n.code,{children:"Cancel"})," buttons."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"CUSTOM"})}),": Displays custom buttons as specified."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"message-type",children:"Message type"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ConfirmDialog"})," supports the following message types. When you configures a type, The dialog displays an icon beside the message, and the dialog's theme updates according to the webforJ design system rules."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PLAIN"}),": Displays the message without an icon, using the default theme."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ERROR"}),": Displays an error icon next to the message with the error theme applied."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"QUESTION"}),": Displays a question mark icon beside the message, using the primary theme."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WARNING"}),": Displays a warning icon next to the message with the warning theme applied."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"INFO"}),": Displays an info icon beside the message, using the info theme."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In the following sample, the code configures a confirm dialog of type ",(0,i.jsx)(n.code,{children:"CUSTOM"})," with a custom title and message."]}),"\n",(0,i.jsx)(t,{path:"https://demo.webforj.com/webapp/controlsamples/confirmdialogoptions?",javaE:"https://raw.githubusercontent.com/webforj/webforj-docs-samples/refs/heads/main/src/main/java/com/webforj/samples/views/optiondialog/confirm/ConfirmDialogOptionsView.java",height:"350px"}),"\n",(0,i.jsx)(n.h2,{id:"result",children:"Result"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ConfirmDialog"})," returns a result based on the user's interaction with the dialog. This result indicates which button the user clicked or if the dialog was dismissed due to a timeout."]}),"\n",(0,i.jsx)(n.admonition,{type:"important",children:(0,i.jsxs)(n.p,{children:["The result will be returned from the ",(0,i.jsx)(n.code,{children:"show()"})," method, or the equivalent ",(0,i.jsx)(n.code,{children:"OptionDialog"})," method as shown below."]})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ConfirmDialog.Result"})," enum includes the following possible results:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"OK"})}),": The user clicked the ",(0,i.jsx)(n.code,{children:"OK"})," button."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"CANCEL"})}),": The user clicked the ",(0,i.jsx)(n.code,{children:"CANCEL"})," button."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"YES"})}),": The user clicked the ",(0,i.jsx)(n.code,{children:"YES"})," button."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"NO"})}),": The user clicked the ",(0,i.jsx)(n.code,{children:"NO"})," button."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ABORT"})}),": The user clicked the ",(0,i.jsx)(n.code,{children:"ABORT"})," button."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"RETRY"})}),": The user clicked the ",(0,i.jsx)(n.code,{children:"RETRY"})," button."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"IGNORE"})}),": The user clicked the ",(0,i.jsx)(n.code,{children:"IGNORE"})," button."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"FIRST_CUSTOM_BUTTON"})}),": The user clicked the first custom button"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"SECOND_CUSTOM_BUTTON"})}),": The user clicked the second custom button"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"THIRD_CUSTOM_BUTTON"})}),": The user clicked the third custom button"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"TIMEOUT"})}),": The dialog timeouts."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"UNKNOWN"})}),": An unknown result, typically used as a default or error state."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:"showLineNumbers",children:'if (result == ConfirmDialog.Result.FIRST_CUSTOM_BUTTON) {\n    OptionDialog.showMessageDialog("Changes discarded", "Discarded", "Got it");\n} else {\n    OptionDialog.showMessageDialog(\n        "Changes saved", "Saved", "Got it", MessageDialog.MessageType.INFO);\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"default-button",children:"Default button"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ConfirmDialog"})," allows you to specify a default button that is preselected when the dialog is displayed. This enhances the user experience by providing a suggested action that can be quickly confirmed by pressing the ",(0,i.jsx)("kbd",{children:"Enter"})," key."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:"showLineNumbers",children:'ConfirmDialog dialog = new ConfirmDialog(\n    "Are you sure?", "Confirm", ConfirmDialog.OptionType.YES_NO);\ndialog.setDefaultButton(Button.SECOND); // second button\ndialog.show();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"buttons-text",children:"Buttons text"}),"\n",(0,i.jsxs)(n.p,{children:["You can configure the text of the buttons using the ",(0,i.jsx)(n.code,{children:"setButtonText(ConfirmDialog.Button button, String text)"})," method."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:"showLineNumbers",children:'ConfirmDialog dialog = new ConfirmDialog(\n    "Are you sure?", "Confirm", ConfirmDialog.OptionType.CUSTOM);\ndialog.setButtonText(ConfirmDialog.Button.FIRST, "Absolutely");\ndialog.setButtonText(ConfirmDialog.Button.SECOND, "Nope");\ndialog.show();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"html-processing",children:"HTML processing"}),"\n",(0,i.jsx)(n.p,{children:"By default, the confirm dialog processes and renders HTML content. You can turn off this feature by configuring it to display raw text instead."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:"showLineNumbers",children:'ConfirmDialog dialog = new ConfirmDialog(\n    "<b>Are you sure?</b>", "Confirm",\n    ConfirmDialog.OptionType.YES_NO, ConfirmDialog.MessageType.QUESTION);\ndialog.setRawText(true);\ndialog.show();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"timeout",children:"Timeout"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ConfirmDialog"})," allows you to set a timeout duration after which the dialog automatically closes. This feature is useful for non-critical confirmations or actions that don't require the user's immediate interaction."]}),"\n",(0,i.jsxs)(n.p,{children:["You can configure the timeout for the dialog using the ",(0,i.jsx)(n.code,{children:"setTimeout(int timeout)"})," method. The timeout duration is in seconds. If the specified time elapses without any user interaction, the dialog closes automatically."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:"showLineNumbers",children:'ConfirmDialog dialog = new ConfirmDialog(\n    "Are you sure?", "Confirm", ConfirmDialog.OptionType.YES_NO);\ndialog.setDefaultButton(Button.SECOND);\ndialog.setTimeout(3);\nConfirmDialog.Result result = dialog.show();\n\nswitch (result) {\n  case TIMEOUT:\n    OptionDialog.showMessageDialog(\n        "You took too long to decide", "Timeout", "Got it",\n        MessageDialog.MessageType.WARNING);\n    break;\n  case YES:\n    OptionDialog.showMessageDialog(\n        "You clicked Yes", "Yes", "Got it",\n        MessageDialog.MessageType.INFO);\n    break;\n  default:\n    OptionDialog.showMessageDialog(\n        "You clicked No", "No", "Got it",\n        MessageDialog.MessageType.INFO);\n    break;\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clear and Concise Prompts"}),": Ensure the prompt message clearly explains what action the user is being asked to confirm. Avoid ambiguity."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Appropriate Option Types"}),': Choose option types that match the context of the action. For simple yes/no decisions, use straightforward options. For more complex scenarios, provide additional buttons like "Cancel" to allow users to back out without making a choice.']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Logical Default Button"}),": Set a default button that aligns with the most likely or recommended user action to streamline decision-making."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consistent Theming"}),": Align the dialog and button themes with your app's design for a cohesive user experience."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Judicious Use of Timeout"}),": Set timeouts for non-critical confirmations, ensuring users have enough time to read and understand the prompt."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Minimize Overuse"}),": Use confirm dialogs sparingly to avoid user frustration. Reserve them for critical actions requiring explicit user confirmation."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"styling",children:"Styling"}),"\n",(0,i.jsx)(n.h3,{id:"shadow-parts",children:"Shadow parts"}),"\n",(0,i.jsxs)(n.p,{children:["These are the various parts of the ",(0,i.jsx)(n.a,{href:"../../glossary#shadow-dom",children:"shadow DOM"})," for the component, which will be required when styling via CSS is desired."]}),"\n",(0,i.jsx)(c,{tag:o(7813).lG,table:"parts"}),"\n",(0,i.jsx)(n.h3,{id:"reflected-attributes",children:"Reflected attributes"}),"\n",(0,i.jsx)(n.p,{children:"The reflected attributes of a component will be shown as attributes in the rendered HTML element for the component in the DOM. This means that styling can be applied using these attributes."}),"\n",(0,i.jsx)(c,{tag:o(7813).lG,table:"reflects"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var i=o(6540);const s={},t=i.createContext(s);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(t.Provider,{value:n},e.children)}},7813:e=>{e.exports=JSON.parse('{"e7":"dwc-app-layout","$n":"dwc-button","Sc":"dwc-checkbox","D0":"dwc-field","Ap":"dwc-slider","qF":"dwc-listbox","tX":"dwc-choicebox","a3":"dwc-combobox","mD":"dwc-navigator","z2":"dwc-progressbar","a":"dwc-radio","TN":"dwc-tabbed-pane","_s":"dwc-drawer","lG":"dwc-dialog","In":"dwc-icon","O3":"dwc-splitter","az":"dwc-login","y$":"dwc-spinner","Rh":"dwc-loading","bJ":"dwc-loading","y8":"dwc-toast"}')}}]);