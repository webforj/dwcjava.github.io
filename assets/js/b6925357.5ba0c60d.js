"use strict";(self.webpackChunkdwcj_documentation=self.webpackChunkdwcj_documentation||[]).push([[6550],{8677:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"introduction/tutorial/working-with-data","title":"Working With Data","description":"This step focuses on adding data management and display capabilities to the demo app. To do this, dummy data about various Customer objects will be created, and the app will be updated to handle this data and display it in a Table added to the previous app.","source":"@site/docs/introduction/tutorial/working-with-data.md","sourceDirName":"introduction/tutorial","slug":"/introduction/tutorial/working-with-data","permalink":"/docs/introduction/tutorial/working-with-data","draft":false,"unlisted":false,"editUrl":"https://github.com/webforj/webforj-docs/tree/website/docs/introduction/tutorial/working-with-data.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Working With Data","sidebar_position":3},"sidebar":"documentationSidebar","previous":{"title":"Creating a Basic App","permalink":"/docs/introduction/tutorial/creating-a-basic-app"},"next":{"title":"Scaling with Routing and Composites","permalink":"/docs/introduction/tutorial/scaling-with-routing-and-composites"}}');var a=n(74848),s=n(28453);const o={title:"Working With Data",sidebar_position:3},r=void 0,d={},c=[{value:"Creating a data model",id:"creating-a-data-model",level:2},{value:"Creating a <code>Service</code> class",id:"creating-a-service-class",level:2},{value:"Creating and using a <code>Table</code>",id:"creating-and-using-a-table",level:2},{value:"Implementing the <code>Table</code> in the app",id:"implementing-the-table-in-the-app",level:3}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["This step focuses on adding data management and display capabilities to the demo app. To do this, dummy data about various ",(0,a.jsx)(t.code,{children:"Customer"})," objects will be created, and the app will be updated to handle this data and display it in a ",(0,a.jsx)(t.a,{href:"../../components/table",children:(0,a.jsx)(t.code,{children:"Table"})})," added to the previous app."]}),"\n",(0,a.jsxs)(t.p,{children:["It will outline creating a ",(0,a.jsx)(t.code,{children:"Customer"})," model class, and integrating it with a ",(0,a.jsx)(t.code,{children:"Service"})," class to access and manage the necessary data using the implementation of a repository. Then, it will detail how to use the retrieved data to implement a ",(0,a.jsx)(t.code,{children:"Table"})," component in the app, displaying customer information in an interactive and structured format."]}),"\n",(0,a.jsxs)(t.p,{children:["By the end of this step, the app created in the ",(0,a.jsx)(t.a,{href:"./creating-a-basic-app",children:"previous step"})," will display a table with the created data that can then be expanded on in the following steps. To run the app:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Go to the ",(0,a.jsx)(t.code,{children:"2-working-with-data"})," directory"]}),"\n",(0,a.jsxs)(t.li,{children:["Run ",(0,a.jsx)(t.code,{children:"mvn jetty:run"})]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Working with data screenshot",src:n(61403).A+"",width:"892",height:"541"})}),"\n",(0,a.jsx)(t.h2,{id:"creating-a-data-model",children:"Creating a data model"}),"\n",(0,a.jsxs)(t.p,{children:["In order to create a ",(0,a.jsx)(t.code,{children:"Table"})," that displays data in the main app, a Java bean class that can be used with the ",(0,a.jsx)(t.code,{children:"Table"})," to display data needs to be created."]}),"\n",(0,a.jsxs)(t.p,{children:["In this program, the ",(0,a.jsx)(t.code,{children:"Customer"})," class in ",(0,a.jsx)(t.code,{children:"src/main/java/com/webforj/demos/data/Customer.java"})," does this. This class serves as the core data model for the app, encapsulating customer-related attributes such as ",(0,a.jsx)(t.code,{children:"firstName"}),", ",(0,a.jsx)(t.code,{children:"lastName"}),", ",(0,a.jsx)(t.code,{children:"company"}),", and ",(0,a.jsx)(t.code,{children:"country"}),". This model will also contain a unique ID."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",metastring:'title="Customer.java"',children:'public class Customer implements HasEntityKey {\n  private String firstName = "";\n  private String lastName = "";\n  private String company = "";\n  private Country country = Country.UNKNOWN;\n  private UUID uuid = UUID.randomUUID();\n\n  public enum Country {\n\n    @SerializedName("Germany")\n    GERMANY,\n\n    // Remaining countries\n  }\n\n    // Getters and Setters\n\n  @Override\n  public Object getEntityKey() {\n    return uuid;\n  }\n}\n'})}),"\n",(0,a.jsxs)(t.admonition,{type:"info",children:[(0,a.jsxs)(t.mdxAdmonitionTitle,{children:["Using ",(0,a.jsx)(t.code,{children:"HasEntityKey"})," for Unique Identifiers"]}),(0,a.jsxs)(t.p,{children:["Implementing the ",(0,a.jsx)(t.code,{children:"HasEntityKey"})," interface is crucial for managing unique identifiers in models used with a ",(0,a.jsx)(t.code,{children:"Table"}),". It ensures that each instance of the model has a unique key, allowing the ",(0,a.jsx)(t.code,{children:"Table"})," to identify and manage rows effectively."]}),(0,a.jsxs)(t.p,{children:["For this demo, the ",(0,a.jsx)(t.code,{children:"getEntityKey()"})," method returns a UUID for each customer, ensuring unique identification. While UUIDs are used here for simplicity, in real-world applications, a database primary key is often a better choice for generating unique keys."]}),(0,a.jsxs)(t.p,{children:["If ",(0,a.jsx)(t.code,{children:"HasEntityKey"})," isn't implemented, the ",(0,a.jsx)(t.code,{children:"Table"})," will default to using the Java hash code as the key. Since hash codes aren't guaranteed to be unique, this can cause conflicts when managing rows in the ",(0,a.jsx)(t.code,{children:"Table"}),"."]})]}),"\n",(0,a.jsxs)(t.p,{children:["With the ",(0,a.jsx)(t.code,{children:"Customer"})," data model in place, the next step is to manage and organize these models within the app."]}),"\n",(0,a.jsxs)(t.h2,{id:"creating-a-service-class",children:["Creating a ",(0,a.jsx)(t.code,{children:"Service"})," class"]}),"\n",(0,a.jsxs)(t.p,{children:["Acting as a centralized data manager, the ",(0,a.jsx)(t.code,{children:"Service"})," class not only loads ",(0,a.jsx)(t.code,{children:"Customer"})," data but also provides an efficient interface for accessing and interacting with it."]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"Service.java"})," class is created in ",(0,a.jsx)(t.code,{children:"src/main/java/com/webforj/demos/data"}),". Instead of manually passing data between components or classes, the ",(0,a.jsx)(t.code,{children:"Service"})," acts as a shared resource, allowing interested parties to retrieve and interact with data easily."]}),"\n",(0,a.jsxs)(t.p,{children:["In this demo, the ",(0,a.jsx)(t.code,{children:"Service"})," class reads customer data from a JSON file located at ",(0,a.jsx)(t.code,{children:"src/main/resources/data/customers.json"}),". The data is mapped onto ",(0,a.jsx)(t.code,{children:"Customer"})," objects and stored in an ",(0,a.jsx)(t.code,{children:"ArrayList"}),", which forms the foundation for the table's ",(0,a.jsx)(t.code,{children:"Repository"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["In webforJ, the ",(0,a.jsx)(t.code,{children:"Repository"})," class provides a structured way to manage and retrieve collections of entities. It acts as an interface between your app and its data, offering methods to query, count, and refresh data while maintaining a clean and consistent structure. It's used by the ",(0,a.jsx)(t.code,{children:"Table"})," class to display the data stored within."]}),"\n",(0,a.jsxs)(t.p,{children:["Although the ",(0,a.jsx)(t.code,{children:"Repository"})," doesn\u2019t include methods for updating or deleting entities, it serves as a structured wrapper around a collection of objects. This makes it ideal for providing organized, efficient data access."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"public class Service {\n  private List<Customer> data = new ArrayList<>();\n  private CollectionRepository<Customer> repository;\n\n  private Service() {\n    data = buildDemoList();\n    repository = new CollectionRepository<>(data);\n  }\n\n  //Remaining implementation\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["To populate the ",(0,a.jsx)(t.code,{children:"Repository"})," with data, the ",(0,a.jsx)(t.code,{children:"Service"})," class acts as the central manager, handling the loading and organization of assets in the app. Customer data is read from a JSON file and mapped to the ",(0,a.jsx)(t.code,{children:"Customer"})," objects in the ",(0,a.jsx)(t.code,{children:"Repository"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"Assets"})," utility in webforJ makes it easy to load this data dynamically using context URLs To load assets and data in webforJ, the ",(0,a.jsx)(t.code,{children:"Service"})," class uses context URLs with the ",(0,a.jsx)(t.code,{children:"Assets"})," utility. For example, customer data can be loaded from the JSON file as follows:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'String content = Assets.contentOf(Assets.resolveContextUrl("context://data/customers.json"));\n'})}),"\n",(0,a.jsxs)(t.admonition,{type:"tip",children:[(0,a.jsxs)(t.mdxAdmonitionTitle,{children:["Using the ",(0,a.jsx)(t.code,{children:"ObjectTable"})]}),(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"Service"})," class uses the ",(0,a.jsx)(t.code,{children:"ObjectTable"})," to manage instances dynamically, instead of relying on static fields. This approach addresses a key limitation when using servlets: static fields are tied to the server\u2019s lifecycle and can lead to issues in environments with multiple requests or concurrent sessions. The ",(0,a.jsx)(t.code,{children:"ObjectTable"})," is scoped to the user session, and using it ensures a singleton-like behavior without these limitations, enabling consistent and scalable data management."]})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",metastring:'title="Service.java"',children:"public class Service {\n\n  private List<Customer> data = new ArrayList<>();\n  private CollectionRepository<Customer> repository;\n\n  // Private constructor to enforce controlled instantiation\n  private Service() {\n    // implementation\n  }\n\n  // Retrieves the current instance of Service or creates one if it doesn\u2019t exist\n  public static Service getCurrent() {\n    // implementation\n  }\n\n  // Load customer data from the JSON file and map it to Customer objects\n  private List<Customer> buildDemoList() {\n    // implementation\n  }\n\n  // Getter...\n}\n"})}),"\n",(0,a.jsxs)(t.h2,{id:"creating-and-using-a-table",children:["Creating and using a ",(0,a.jsx)(t.code,{children:"Table"})]}),"\n",(0,a.jsxs)(t.p,{children:["Now that the data needed has been properly created via the ",(0,a.jsx)(t.code,{children:"Customer"})," class, and can is returned as a ",(0,a.jsx)(t.code,{children:"Repository"})," via the ",(0,a.jsx)(t.code,{children:"Service"})," class, the final task in this step is to integrate the ",(0,a.jsx)(t.code,{children:"Table"})," component into the app to display customer data."]}),"\n",(0,a.jsxs)(t.admonition,{type:"tip",children:[(0,a.jsxs)(t.mdxAdmonitionTitle,{children:["More about the ",(0,a.jsx)(t.code,{children:"Table"})]}),(0,a.jsxs)(t.p,{children:["For a more detailed overview of the various features of behaviors of the ",(0,a.jsx)(t.code,{children:"Table"}),", see ",(0,a.jsx)(t.a,{href:"../../components/table",children:"this article"}),"."]})]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"Table"})," provides a dynamic and flexible way to display structured data in your app. It's designed to integrate with the ",(0,a.jsx)(t.code,{children:"Repository"})," class, enabling features like data querying, pagination, and efficient updates. A ",(0,a.jsx)(t.code,{children:"Table"})," is highly configurable, allowing you to define columns, control its appearance, and bind it to data repositories with minimal effort."]}),"\n",(0,a.jsxs)(t.h3,{id:"implementing-the-table-in-the-app",children:["Implementing the ",(0,a.jsx)(t.code,{children:"Table"})," in the app"]}),"\n",(0,a.jsxs)(t.p,{children:["Since the data for the ",(0,a.jsx)(t.code,{children:"Table"})," is handled fully through the ",(0,a.jsx)(t.code,{children:"Service"})," class, the main task in ",(0,a.jsx)(t.code,{children:"DemoApplication.java"})," is configuring the ",(0,a.jsx)(t.code,{children:"Table"})," and linking it to the ",(0,a.jsx)(t.code,{children:"Repository"})," provided by the ",(0,a.jsx)(t.code,{children:"Service"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["To configure the ",(0,a.jsx)(t.code,{children:"Table"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Set its width and height for layout purposes using the ",(0,a.jsx)(t.code,{children:"setHeight()"})," and ",(0,a.jsx)(t.code,{children:"setWidth()"})," methods."]}),"\n",(0,a.jsx)(t.li,{children:"Define the columns, specifying their names and the methods to fetch the data for each."}),"\n",(0,a.jsxs)(t.li,{children:["Assign the ",(0,a.jsx)(t.code,{children:"Repository"})," to provide data dynamically."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"After doing this, the code will look similar to the following snippet:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",metastring:'title="DemoApplication.java"',children:'public class DemoApplication extends App {\n  // Other components from step one\n\n  // The Table component for displaying Customer data\n  Table<Customer> table = new Table<>();\n\n  @Override\n  public void run() throws WebforjException {\n    // Previous implementation of step one\n    buildTable();\n    mainFrame.add(demo, btn, table);\n  }\n\n  private void buildTable() {\n    // Set the table\'s height to 300 pixels\n    table.setHeight("300px");\n    // Set the table\'s width to 1000 pixels\n    table.setWidth(1000);\n\n    // Add the various column titles and assign the appropriate getters\n    table.addColumn("First Name", Customer::getFirstName);\n    table.addColumn("Last Name", Customer::getLastName);\n    table.addColumn("Company", Customer::getCompany);\n    table.addColumn("Country", Customer::getCountry);\n\n    // Bind the Table to a Repository containing Customer data\n    // The Repository is retrieved through the Service class\n    table.setRepository(Service.getCurrent().getCustomers());\n  }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"With the completed changes to the app implemented, the following steps will happen when the app runs:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["The ",(0,a.jsx)(t.code,{children:"Service"})," class retrieves ",(0,a.jsx)(t.code,{children:"Customer"})," data from the JSON file and stores it in a ",(0,a.jsx)(t.code,{children:"Repository"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:["The ",(0,a.jsx)(t.code,{children:"Table"})," integrates the ",(0,a.jsx)(t.code,{children:"Repository"})," for data and populates its rows dynamically."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["With the ",(0,a.jsx)(t.code,{children:"Table"})," now displaying ",(0,a.jsx)(t.code,{children:"Customer"})," data, the next step will focus on creating a new screen to modify customer details and integrating routing into the app."]}),"\n",(0,a.jsxs)(t.p,{children:["This will allow organization of the app\u2019s logic more effectively by moving it out of the main ",(0,a.jsx)(t.code,{children:"App"})," class, and into constituent screens access via routes."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},61403:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/step2-a26a69cf19fdca3a31400a29530d9b58.png"},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(96540);const a={},s=i.createContext(a);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);