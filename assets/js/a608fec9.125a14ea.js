"use strict";(self.webpackChunkdwcj_documentation=self.webpackChunkdwcj_documentation||[]).push([[2485],{8728:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"components/icon","title":"Icon","description":"The weborJ Icon component allows you to effortlessly include icons in your user interface.","source":"@site/docs/components/icon.md","sourceDirName":"components","slug":"/components/icon","permalink":"/docs/components/icon","draft":false,"unlisted":false,"editUrl":"https://github.com/webforj/webforj-docs/tree/website/docs/components/icon.md","tags":[],"version":"current","frontMatter":{"title":"Icon"},"sidebar":"documentationSidebar","previous":{"title":"Google Charts","permalink":"/docs/components/google-charts"},"next":{"title":"Loading","permalink":"/docs/components/loading"}}');var t=o(4848),i=o(8453);const a={title:"Icon"},c=void 0,r={},l=[{value:"Basics",id:"basics",level:2},{value:"Pools",id:"pools",level:3},{value:"Names",id:"names",level:3},{value:"Variations",id:"variations",level:3},{value:"<code>FontAwesomeIcon</code> variations",id:"fontawesomeicon-variations",level:4},{value:"<code>TablerIcon</code> variations",id:"tablericon-variations",level:4},{value:"Adding icons to components",id:"adding-icons-to-components",level:2},{value:"Icon placement: before VS after",id:"icon-placement-before-vs-after",level:3},{value:"Creating custom pools",id:"creating-custom-pools",level:2},{value:"Custom pool factory",id:"custom-pool-factory",level:3},{value:"Icon buttons",id:"icon-buttons",level:2},{value:"Best practices",id:"best-practices",level:2},{value:"Styling",id:"styling",level:2},{value:"Themes",id:"themes",level:3},{value:"Shadow parts",id:"shadow-parts",level:3},{value:"CSS properties",id:"css-properties",level:3},{value:"Reflected attributes",id:"reflected-attributes",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{ComponentDemo:s,DocChip:a,JavadocLink:c,TableBuilder:r}=n;return s||p("ComponentDemo",!0),a||p("DocChip",!0),c||p("JavadocLink",!0),r||p("TableBuilder",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a,{chip:"shadow"}),"\n",(0,t.jsx)(a,{chip:"name",label:"dwc-icon"}),"\n",(0,t.jsx)(c,{type:"foundation",location:"com/webforj/component/icons/Icon",top:"true"}),"\n",(0,t.jsxs)(n.p,{children:["The weborJ ",(0,t.jsx)(n.code,{children:"Icon"})," component allows you to effortlessly include icons in your user interface.\nIcons are a fundamental part of enhancing the design of the user interface, making it faster for users to scan the screen for actionable items.\nUsing icons in your app creates visual cues for navigation and actions, which can reduce the amount of text needed and simplify the user interface. You can choose from three existing icon pools and webforJ also gives you the option to create new ones from scratch."]}),"\n",(0,t.jsx)(n.admonition,{title:"Did you know?",type:"tip",children:(0,t.jsxs)(n.p,{children:["Some components, like ",(0,t.jsx)(n.code,{children:"PasswordField"})," and ",(0,t.jsx)(n.code,{children:"TimeField"}),", have built-in icons to help convey meaning for end users."]})}),"\n",(0,t.jsx)(n.h2,{id:"basics",children:"Basics"}),"\n",(0,t.jsxs)(n.p,{children:["Every ",(0,t.jsx)(n.code,{children:"Icon"})," is designed as a Scalable Vector Graphics (SVG) image, which means it can easily scale to any size without losing clarity or quality.\nAdditionally, ",(0,t.jsx)(n.code,{children:"Icon"})," components are loaded on demand from a content delivery network (CDN), which helps reduce latency and improve overall performance."]}),"\n",(0,t.jsxs)(n.p,{children:["When creating an ",(0,t.jsx)(n.code,{children:"Icon"}),", you'll need to identify a specific pool and the name of the icon itself.\nSome icons also offer the choice between an outlined or a filled version via ",(0,t.jsx)(n.a,{href:"#variations",children:"variations"}),"."]}),"\n",(0,t.jsx)(s,{path:"https://demo.webforj.com/webapp/controlsamples/iconbasics?",javaE:"https://raw.githubusercontent.com/webforj/webforj-docs-samples/refs/heads/main/src/main/java/com/webforj/samples/views/icon/IconBasicsView.java",height:"100px"}),"\n",(0,t.jsx)(n.h3,{id:"pools",children:"Pools"}),"\n",(0,t.jsx)(n.p,{children:"An icon pool is a collection of commonly used icons that enables easy access and reuse. By using icons from an icon pool, you can ensure that the icons in your app are recognizable and share a consistent style.\nUsing webforJ allows you to choose from three pools, or implement a custom pool.\nEach pool has an extensive collection of open source icons that are free to use.\nUsing webforJ gives you the flexibility to choose from three pools and use them as unique classes, without the hassle of downloading any of the icons directly."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Icon Pool"}),(0,t.jsx)(n.th,{children:"webforJ Class"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://tabler-icons.io/",children:"Tabler"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"TablerIcon"})," and ",(0,t.jsx)(n.code,{children:"DwcIcon"}),".",(0,t.jsx)("br",{}),(0,t.jsx)(n.code,{children:"DwcIcon"})," is a subset of the Tabler icons."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://feathericons.com/",children:"Feather"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"FeatherIcon"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://fontawesome.com/search",children:"Font Awesome"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"FontAwesomeIcon"})})]})]})]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["If you're interested in creating your own icon pool, see ",(0,t.jsx)(n.a,{href:"#creating-custom-pools",children:"Creating custom pools"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"Once you have selected the pool or pools to include in your app, the next step is to specify the name of the icon you want to use."}),"\n",(0,t.jsx)(n.h3,{id:"names",children:"Names"}),"\n",(0,t.jsxs)(n.p,{children:["To include an icon in your app, all you need is the icon pool and the icon name. Browse the icon pool website for the icon you wish to use, and use the icon name as the parameter of the ",(0,t.jsx)(n.code,{children:"create()"})," method.\nAdditionally, you have the option to create the icons through enums for the ",(0,t.jsx)(n.code,{children:"FeatherIcon"})," and ",(0,t.jsx)(n.code,{children:"DwcIcon"})," classes, allowing them to appear in code completion."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Create an icon from a String name\nIcon image = TablerIcon.create("image");\n// Create an icon from an enum\nIcon image = FeatherIcon.IMAGE.create();\n'})}),"\n",(0,t.jsx)(n.h3,{id:"variations",children:"Variations"}),"\n",(0,t.jsxs)(n.p,{children:["You can personalize icons even more by utilizing variations.\nCertain icons allow you to choose between an outlined or a filled version, allowing you to put emphasis on a specific icon based on your preference. ",(0,t.jsx)(n.code,{children:"FontAwesomeIcon"})," and ",(0,t.jsx)(n.code,{children:"Tabler"})," icons offer variations."]}),"\n",(0,t.jsxs)(n.h4,{id:"fontawesomeicon-variations",children:[(0,t.jsx)(n.code,{children:"FontAwesomeIcon"})," variations"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"REGULAR"}),": The outlined variate of icons. This is the default."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"SOLID"}),": The filled variate of icons."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"BRAND"}),": The variate for when you're using the icons of brands."]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"tablericon-variations",children:[(0,t.jsx)(n.code,{children:"TablerIcon"})," variations"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"OUTLINE"}),": The outlined variate of icons. This is the default."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FILLED"}),": The filled variate of icons."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// A filled variation of an icon from Font Awesome\nIcon music = FontAwesomeIcon.create("user", FontAwesomeIcon.Variate.SOLID);\n'})}),"\n",(0,t.jsx)(n.p,{children:"The following demo illustrates how to use icons from different pools, apply variations, and seamlessly integrate them into components."}),"\n",(0,t.jsx)(s,{path:"https://demo.webforj.com/webapp/controlsamples/iconvariations?",javaE:"https://raw.githubusercontent.com/webforj/webforj-docs-samples/refs/heads/main/src/main/java/com/webforj/samples/views/icon/IconVariationsView.java",height:"100px"}),"\n",(0,t.jsx)(n.h2,{id:"adding-icons-to-components",children:"Adding icons to components"}),"\n",(0,t.jsxs)(n.p,{children:["Integrate icons into your components using slots. Slots provide flexible options for improving the functionality of a component. It's beneficial to add an ",(0,t.jsx)(n.code,{children:"Icon"})," to a component to further clarify intended meaning to users.\nComponents that implement the ",(0,t.jsx)(n.code,{children:"HasPrefixAndSuffix"})," interface can include an ",(0,t.jsx)(n.code,{children:"Icon"})," or other valid components. The added components can be placed in the ",(0,t.jsx)(n.code,{children:"prefix"})," and ",(0,t.jsx)(n.code,{children:"suffix"})," slots and can enhance both overall design and user experience."]}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"prefix"})," and ",(0,t.jsx)(n.code,{children:"suffix"})," slots, you can determine if you want the icon before or after the text using the ",(0,t.jsx)(n.code,{children:"setPrefixComponent()"})," and ",(0,t.jsx)(n.code,{children:"setSuffixComponent()"})," methods."]}),"\n",(0,t.jsx)(n.p,{children:"Deciding whether to place an icon before or after the text on a component largely depends on the purpose and design context."}),"\n",(0,t.jsx)(n.h3,{id:"icon-placement-before-vs-after",children:"Icon placement: before VS after"}),"\n",(0,t.jsx)(n.p,{children:"Icons positioned before the component text help users quickly understand the primary action or purpose of the component, especially for universally recognized icons like the save icon.\nIcons before a component's text offers a logical processing order, guiding users naturally through the intended action, which is beneficial for buttons whose primary function is an immediate action."}),"\n",(0,t.jsx)(n.p,{children:"On the other hand, placing icons after the component text is effective for actions that provide additional context or options, enhancing clarity and cues for navigation.\nIcons after a component's text is ideal for components that either offer supplementary information or guide users in a directional flow."}),"\n",(0,t.jsx)(n.p,{children:"Ultimately, consistency is key. Once you choose a style, maintain it across your site for a cohesive and user-friendly design."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(s,{path:"https://demo.webforj.com/webapp/controlsamples/iconprefixsuffix?",javaE:"https://raw.githubusercontent.com/webforj/webforj-docs-samples/refs/heads/main/src/main/java/com/webforj/samples/views/icon/IconPrefixSuffixView.java",height:"100px"}),"\ufe0f"]}),"\n",(0,t.jsx)(n.h2,{id:"creating-custom-pools",children:"Creating custom pools"}),"\n",(0,t.jsx)(n.p,{children:"Beyond utilizing existing icon collections, you have the option to create a custom pool that can be used for custom logos or avatars.\nA custom pool of icons can be stored in a centralized directory or in the resources folder (context), simplifying the icon management process.\nHaving a custom pool makes app creation more consistent and reduces maintenance across different components and modules."}),"\n",(0,t.jsxs)(n.p,{children:["Custom pools can be created from a folder containing SVG images and by using the ",(0,t.jsx)(n.code,{children:"IconPoolBuilder"})," class. From there, you can choose the name of your custom pool and use that with the SVG file names to create custom icon components."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Creating a custom pool called "app-pool" that has images for a logo and an avatar.\nIconPoolBuilder.fromDirectory("app-pool", "context://icons");\nIcon customLogo = new Icon("logo", "app-pool");\nIcon customAvatar = new Icon("avatar-default", "app-pool");\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Make sure to design icons with equal width and height, as ",(0,t.jsx)(n.code,{children:"Icon"})," components are designed to occupy a square space."]})}),"\n",(0,t.jsx)(n.h3,{id:"custom-pool-factory",children:"Custom pool factory"}),"\n",(0,t.jsxs)(n.p,{children:["You can also create a factory class for a custom pool in webforJ, just like ",(0,t.jsx)(n.code,{children:"FeatherIcon"}),". This enables you to create and manage icon resources within a specified pool and allow for code completion.\nEach icon can be instantiated through the ",(0,t.jsx)(n.code,{children:"create()"})," method, which returns an ",(0,t.jsx)(n.code,{children:"Icon"}),". The factory class should provide pool-specific metadata, such as the pool name and the icon's identifier, formatted to the image's file name.\nThis design allows easy, standardized access to icon assets from the custom pool using enum constants, supporting scalability and maintainability in icon management."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"/// Creating a custom pool factory for app-pool\npublic enum AppPoolIcon implements IconFactory {\n  LOGO, AVATAR_DEFAULT;\n\n  public Icon create() {\n    return new Icon(String.valueOf(this), this.getPool());\n  }\n\n  /**\n   * @return the pool name for the icons\n   */\n  @Override\n  public String getPool() {\n    return \"app-pool\";\n  }\n\n  /**\n   * @return the icon name\n   */\n  @Override\n  public String toString() {\n    return this.name().toLowerCase(Locale.ENGLISH).replace('_', '-');\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following snippet shows the two different ways of using a custom pool."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'IconPoolBuilder.fromDirectory("app-pool", "context://icons");\n\n// Create an Icon using the names of the custom pool and image file\nIcon customLogo = new Icon("logo", "app-pool");\n\n// Create an Icon using the custom pool factory from the previous snippet\nIcon customLogo = AppPoolIcon.LOGO.create();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"icon-buttons",children:"Icon buttons"}),"\n",(0,t.jsxs)(n.p,{children:["An ",(0,t.jsx)(n.code,{children:"Icon"})," component is nonselectable, but for actions that are best represented with just an icon, such as notifications or alerts, you can use the ",(0,t.jsx)(n.code,{children:"IconButton"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'IconButton bell = new IconButton(FeatherIcon.BELL.create());\nbell.onClick(e -> showMessageDialog("You have a new message!", "Ding Dong!"));\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Accessibility:"})," Use a tool tip or a label on icons to make your app accessible to visually impaired users relying on screen readers."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Avoid ambiguity:"})," Avoid using icons if the meaning isn\u2019t clear or widely understood. If users have to guess what the icon represents, it defeats the purpose."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use icons sparingly:"})," Too many icons can overwhelm users, so only use icons when they add clarity or reduce complexity."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"styling",children:"Styling"}),"\n",(0,t.jsxs)(n.p,{children:["An Icon inherits the theme of its direct parent component, but you can override this by applying a theme to an ",(0,t.jsx)(n.code,{children:"Icon"})," directly."]}),"\n",(0,t.jsx)(n.h3,{id:"themes",children:"Themes"}),"\n",(0,t.jsx)(n.p,{children:"Icon components come with 7 discrete themes built in for quick styling without the use of CSS. These themes are pre-defined styles that can be applied to icons to change their appearance and visual presentation. They offer a quick and consistent way to customize the look of icons throughout an app."}),"\n",(0,t.jsx)(n.p,{children:"While there are many use cases for each of the various themes, some examples uses are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DANGER"}),": Best for actions with severe consequences, such as clearing filled-out information or permanently deleting an account/data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DEFAULT"}),": Appropriate for actions throughout an app that don't require special attention and are generic, such as toggling a setting."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"PRIMARY"}),': Appropriate as a main "call-to-action" on a page, such as signing up, saving changes, or continuing to another page.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"SUCCESS"}),": Excellent for visualizing successful completion of an element in an app, such as the submission of a form or completion of a sign-up process. The success theme can by programmatically applied once a successful action has been completed."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"WARNING"}),": Useful to indicate that a user is about to perform a potentially risky action, such as navigating away from a page with unsaved changes. These actions are often less impactful than those that would use the Danger theme."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GRAY"}),": Good for subtle actions, such as minor settings or actions that are more supplementary to a page, and not part of the main functionality."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"INFO"}),": Good for providing additional clarifying information to a user."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"shadow-parts",children:"Shadow parts"}),"\n",(0,t.jsx)(n.p,{children:"These are the various parts of the shadow DOM for the component, which will be required when styling via CSS is desired."}),"\n",(0,t.jsx)(r,{tag:o(7813).In,table:"parts"}),"\n",(0,t.jsx)(n.h3,{id:"css-properties",children:"CSS properties"}),"\n",(0,t.jsx)(n.p,{children:"These are the various CSS properties that are used in the component, with a short description of their use."}),"\n",(0,t.jsx)(r,{tag:o(7813).In,table:"properties"}),"\n",(0,t.jsx)(n.h3,{id:"reflected-attributes",children:"Reflected attributes"}),"\n",(0,t.jsx)(n.p,{children:"The reflected attributes of a component will be shown as attributes in the rendered HTML element for the component in the DOM. This means that styling can be applied using these attributes."}),"\n",(0,t.jsx)(r,{tag:o(7813).In,table:"reflects"})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>c});var s=o(6540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},7813:e=>{e.exports=JSON.parse('{"e7":"dwc-app-layout","$n":"dwc-button","Sc":"dwc-checkbox","D0":"dwc-field","Ap":"dwc-slider","qF":"dwc-listbox","tX":"dwc-choicebox","a3":"dwc-combobox","mD":"dwc-navigator","z2":"dwc-progressbar","a":"dwc-radio","TN":"dwc-tabbed-pane","_s":"dwc-drawer","lG":"dwc-dialog","In":"dwc-icon","O3":"dwc-splitter","az":"dwc-login","y$":"dwc-spinner","Rh":"dwc-loading","bJ":"dwc-loading","y8":"dwc-toast"}')}}]);