"use strict";(self.webpackChunkdwcj_documentation=self.webpackChunkdwcj_documentation||[]).push([[9079],{7267:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=s(4848),n=s(8453);const a={title:"ProgressBar"},o=void 0,i={id:"components/progressbar",title:"ProgressBar",description:"ProgressBar is component that visually displays the progress of some task. As the task progresses towards completion, the progress bar displays the task's percentage of completion. This percentage is represented visually by a rectangle which starts out empty and gradually becomes filled in as the task progresses. In addition, the progress bar can display a textual representation of this percentage.",source:"@site/docs/components/progressbar.md",sourceDirName:"components",slug:"/components/progressbar",permalink:"/docs/components/progressbar",draft:!1,unlisted:!1,editUrl:"https://github.com/webforj/webforj-docs/tree/website/docs/components/progressbar.md",tags:[],version:"current",frontMatter:{title:"ProgressBar"},sidebar:"documentationSidebar",previous:{title:"Navigator",permalink:"/docs/components/navigator"},next:{title:"RadioButton",permalink:"/docs/components/radiobutton"}},l={},c=[{value:"Usages",id:"usages",level:2},{value:"Setting values",id:"setting-values",level:2},{value:"Orientation",id:"orientation",level:2},{value:"Indeterminate state",id:"indeterminate-state",level:2},{value:"Text and text visibility",id:"text-and-text-visibility",level:2},{value:"Styling",id:"styling",level:2},{value:"Themes",id:"themes",level:3},{value:"Shadow Parts",id:"shadow-parts",level:3},{value:"CSS Properties",id:"css-properties",level:3},{value:"Reflected Attributes",id:"reflected-attributes",level:3},{value:"Best practices",id:"best-practices",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components},{ComponentDemo:a,DocChip:o,JavadocLink:i,TableBuilder:l}=t;return a||h("ComponentDemo",!0),o||h("DocChip",!0),i||h("JavadocLink",!0),l||h("TableBuilder",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o,{tooltipText:"This component will render with a shadow DOM, an API built into the browser that facilitates encapsulation.",label:"Shadow",target:"_blank",clickable:!1,iconName:"shadow"}),"\n",(0,r.jsx)(o,{tooltipText:"The name of the web component that will render in the DOM.",label:"dwc-progress-bar",clickable:!1,iconName:"code"}),"\n",(0,r.jsx)(i,{type:"foundation",location:"com/webforj/component/progressbar/ProgressBar",top:"true"}),"\n",(0,r.jsx)(t.p,{children:"ProgressBar is component that visually displays the progress of some task. As the task progresses towards completion, the progress bar displays the task's percentage of completion. This percentage is represented visually by a rectangle which starts out empty and gradually becomes filled in as the task progresses. In addition, the progress bar can display a textual representation of this percentage."}),"\n",(0,r.jsx)(a,{path:"https://demo.webforj.com/webapp/controlsamples/progressbarbasic?",javaE:"https://raw.githubusercontent.com/webforj/webforj-docs-samples/refs/heads/main/src/main/java/com/webforj/samples/views/progressbar/ProgressBarBasicView.java",height:"150px"}),"\n",(0,r.jsx)(t.h2,{id:"usages",children:"Usages"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"ProgressBar"})," component is useful for visualizing the completion status of tasks. It supports:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Configurable minimum and maximum values."}),"\n",(0,r.jsx)(t.li,{children:"Indeterminate mode for ongoing tasks without a definite end."}),"\n",(0,r.jsx)(t.li,{children:"Options for text visibility, animation, and striped designs for better visual feedback."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"setting-values",children:"Setting values"}),"\n",(0,r.jsx)(t.p,{children:"The ProgressBar component allows setting and getting its current value, minimum, and maximum limits."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",metastring:"showLineNumbers",children:"ProgressBar bar = new ProgressBar();\nbar.setMin(0);\nbar.setMax(100);\nbar.setValue(50);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"orientation",children:"Orientation"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"ProgressBar"})," can be oriented horizontally or vertically."]}),"\n",(0,r.jsx)(a,{path:"https://demo.webforj.com/webapp/controlsamples/progressbarorientation?",javaE:"https://raw.githubusercontent.com/webforj/webforj-docs-samples/refs/heads/main/src/main/java/com/webforj/samples/views/progressbar/ProgressBarOrientationView.java",height:"175px"}),"\n",(0,r.jsx)(t.h2,{id:"indeterminate-state",children:"Indeterminate state"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"ProgressBar"})," supports an indeterminate state for tasks with unknown completion time."]}),"\n",(0,r.jsx)(a,{path:"https://demo.webforj.com/webapp/controlsamples/progressbardeterminate?",javaE:"https://raw.githubusercontent.com/webforj/webforj-docs-samples/refs/heads/main/src/main/java/com/webforj/samples/views/progressbar/ProgressBarDeterminateView.java",height:"25px"}),"\n",(0,r.jsx)(t.h2,{id:"text-and-text-visibility",children:"Text and text visibility"}),"\n",(0,r.jsxs)(t.p,{children:["By default when created, the progress bar displays the percentage complete in the format ",(0,r.jsx)(t.code,{children:"XX%"}),". Using the ",(0,r.jsx)(t.code,{children:"setText()"})," method, you can use the placeholder ",(0,r.jsx)(t.code,{children:"{{x}}"})," to get the current value as a percentage. Additionally, you can use the placeholder\n",(0,r.jsx)(t.code,{children:"{{value}}"})," to get the raw current value."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'ProgressBar bar = new ProgressBar(15, "Downloading: {{x}}%");\n'})}),"\n",(0,r.jsx)(t.h2,{id:"styling",children:"Styling"}),"\n",(0,r.jsx)(t.h3,{id:"themes",children:"Themes"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"ProgressBar"})," component comes with ",(0,r.jsx)(i,{type:"foundation",location:"com/webforj/component/Theme",children:" themes "})," built in for quick styling without the use of CSS. These themes are pre-defined styles that can be applied to buttons to change their appearance and visual presentation.\nThey offer a quick and consistent way to customize the look of ProgressBars throughout an app."]}),"\n",(0,r.jsx)(a,{path:"https://demo.webforj.com/webapp/controlsamples/progressbarthemes?",javaE:"https://raw.githubusercontent.com/webforj/webforj-docs-samples/refs/heads/main/src/main/java/com/webforj/samples/views/progressbar/ProgressBarThemesView.java",height:"320px"}),"\n",(0,r.jsx)(t.h3,{id:"shadow-parts",children:"Shadow Parts"}),"\n",(0,r.jsxs)(t.p,{children:["These are the various parts of the ",(0,r.jsx)(t.a,{href:"../glossary#shadow-dom",children:"shadow DOM"})," for the component, which will be required when styling via CSS is desired."]}),"\n",(0,r.jsx)(l,{tag:s(7813).z2,table:"parts"}),"\n",(0,r.jsx)(t.h3,{id:"css-properties",children:"CSS Properties"}),"\n",(0,r.jsx)(t.p,{children:"These are the various CSS properties that are used in the component, with a short description of their use."}),"\n",(0,r.jsx)(l,{tag:s(7813).z2,table:"properties"}),"\n",(0,r.jsx)(t.h3,{id:"reflected-attributes",children:"Reflected Attributes"}),"\n",(0,r.jsx)(t.p,{children:"The reflected attributes of a component will be shown as attributes in the rendered HTML element for the component in the DOM. This means that styling can be applied using these attributes."}),"\n",(0,r.jsx)(l,{tag:s(7813).z2,table:"reflects"}),"\n",(0,r.jsx)(t.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Use Appropriate Minimum and Maximum Values"}),": Set the minimum and maximum values to accurately reflect the task's range."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Update Progress Regularly"}),": Continuously update the progress value to provide real-time feedback to users."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Utilize Indeterminate State for Unknown Durations"}),": Use the indeterminate state for tasks with unpredictable durations to indicate ongoing progress."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Show Text for Better User Feedback"}),": Display text on the progress bar to offer additional context about the task's progress."]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}function h(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>i});var r=s(6540);const n={},a=r.createContext(n);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(a.Provider,{value:t},e.children)}},7813:e=>{e.exports=JSON.parse('{"e7":"dwc-app-layout","$n":"dwc-button","Sc":"dwc-checkbox","D0":"dwc-field","Ap":"dwc-slider","qF":"dwc-listbox","tX":"dwc-choicebox","a3":"dwc-combobox","mD":"dwc-navigator","z2":"dwc-progressbar","a":"dwc-radio","TN":"dwc-tabbed-pane","_s":"dwc-drawer","lG":"dwc-dialog","In":"dwc-icon","O3":"dwc-splitter","az":"dwc-login"}')}}]);