"use strict";(self.webpackChunkdwcj_documentation=self.webpackChunkdwcj_documentation||[]).push([[9234],{5188:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>n,metadata:()=>i,toc:()=>d});var s=t(4848),o=t(8453);const n={title:"Google Charts"},r=void 0,i={id:"components/google-charts",title:"Google Charts",description:"To use the GoogleChart class in your app, use the following XML in your POM file:",source:"@site/docs/components/google-charts.md",sourceDirName:"components",slug:"/components/google-charts",permalink:"/docs/components/google-charts",draft:!1,unlisted:!1,editUrl:"https://github.com/webforj/webforj-docs/tree/website/docs/components/google-charts.md",tags:[],version:"current",frontMatter:{title:"Google Charts"},sidebar:"documentationSidebar",previous:{title:"FlexLayout",permalink:"/docs/components/flex-layout"},next:{title:"Loading",permalink:"/docs/components/loading"}},c={},d=[{value:"Chart types",id:"chart-types",level:2},{value:"Options",id:"options",level:2},{value:"Setting data",id:"setting-data",level:2},{value:"Basic data setup",id:"basic-data-setup",level:3},{value:"Using maps for more complex structures",id:"using-maps-for-more-complex-structures",level:3},{value:"Loading data and options from JSON",id:"loading-data-and-options-from-json",level:3},{value:"Updating chart visuals",id:"updating-chart-visuals",level:2},{value:"Exporting charts as images",id:"exporting-charts-as-images",level:2}];function l(e){const a={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{ComponentDemo:t,DocChip:n,JavadocLink:r}=a;return t||p("ComponentDemo",!0),n||p("DocChip",!0),r||p("JavadocLink",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n,{tooltipText:"This component will render with a shadow DOM, an API built into the browser that facilitates encapsulation.",label:"Shadow",component:"a",href:"../../glossary#shadow-dom",target:"_blank",clickable:!0,iconName:"shadow"}),"\n",(0,s.jsx)(n,{tooltipText:"The name of the web component that will render in the DOM.",label:"google-chart",clickable:!1,iconName:"code"}),"\n",(0,s.jsx)(r,{type:"googlecharts",location:"com/webforj/component/googlecharts/GoogleChart",top:"true"}),"\n",(0,s.jsxs)(a.admonition,{title:"Importing Google Charts",type:"info",children:[(0,s.jsxs)(a.p,{children:["To use the ",(0,s.jsx)(a.code,{children:"GoogleChart"})," class in your app, use the following XML in your POM file:"]}),(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-xml",children:"<dependency>\n    <groupId>com.webforj</groupId>\n    <artifactId>webforj-googlecharts</artifactId>\n    <version>${webforj.version}</version>\n</dependency>\n"})})]}),"\n",(0,s.jsxs)(a.p,{children:["The ",(0,s.jsx)(a.code,{children:"GoogleChart"})," class is a comprehensive solution for embedding rich, interactive charts within web applications. This class acts as a bridge to the ",(0,s.jsx)(a.a,{href:"https://developers.google.com/chart",children:"Google Charts"})," library, offering a wide variety of chart types suitable for any data visualization task."]}),"\n",(0,s.jsx)(t,{path:"https://demo.webforj.com/webapp/controlsamples/chart?",javaE:"https://raw.githubusercontent.com/webforj/webforj-docs-samples/refs/heads/main/src/main/java/com/webforj/samples/views/googlecharts/ChartView.java",height:"300px"}),"\n",(0,s.jsx)(a.h2,{id:"chart-types",children:"Chart types"}),"\n",(0,s.jsxs)(a.p,{children:["The ",(0,s.jsx)(a.code,{children:"GoogleChart"})," addon offers a comprehensive array of chart types to suit various data visualization requirements. Selecting the appropriate chart type is essential for effectively communicating the data's story. See the gallery below for examples of common charts that can be used in a webforJ app."]}),"\n",(0,s.jsx)(t,{path:"https://demo.webforj.com/webapp/controlsamples/chartgallery?",javaE:"https://raw.githubusercontent.com/webforj/webforj-docs-samples/refs/heads/main/src/main/java/com/webforj/samples/views/googlecharts/ChartGalleryView.java",cssURL:"https://raw.githubusercontent.com/webforj/ControlSamples/main/src/main/resources/css/googlecharts/chartGallery.css",height:"600px"}),"\n",(0,s.jsx)(a.h2,{id:"options",children:"Options"}),"\n",(0,s.jsxs)(a.p,{children:["The ",(0,s.jsx)(a.code,{children:"GoogleChart"})," addon enables extensive customization through a variety of options. These options allow you to tailor the look and functionality of your charts to fit your app's needs. Options are passed as a ",(0,s.jsx)(a.code,{children:"Map<String, Object>"})," to the chart's ",(0,s.jsx)(a.code,{children:"setOptions()"})," method."]}),"\n",(0,s.jsx)(a.p,{children:"Here's an example for setting a chart's options:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:'Map<String, Object> options = new HashMap<>();\noptions.put("title", "Monthly Revenue");\noptions.put("backgroundColor", "#EFEFEF");\n\n// Apply the options to the chart\nchart.setOptions(options);\n'})}),"\n",(0,s.jsxs)(a.p,{children:["For more information on the options available for specific charts, see the ",(0,s.jsx)(a.a,{href:"https://developers.google.com/chart/interactive/docs/gallery",children:"Google Visualization API reference (Chart Gallery)"}),"."]}),"\n",(0,s.jsx)(a.h2,{id:"setting-data",children:"Setting data"}),"\n",(0,s.jsxs)(a.p,{children:["Visualizing data with ",(0,s.jsx)(a.code,{children:"GoogleChart"})," requires properly structuring and setting the data. This guide will walk you through preparing your data and applying it to your charts."]}),"\n",(0,s.jsx)(a.h3,{id:"basic-data-setup",children:"Basic data setup"}),"\n",(0,s.jsxs)(a.p,{children:["The most straightforward way to define the data is by using ",(0,s.jsx)(a.code,{children:"List<Object>"}),", where each row is a list of values."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:'List<Object> data = new ArrayList<>();\ndata.add(Arrays.asList("Task", "Hours per Day"));\ndata.add(Arrays.asList("Work", 11));\ndata.add(Arrays.asList("Eat", 2));\ndata.add(Arrays.asList("Commute", 2));\ndata.add(Arrays.asList("Watch TV", 2));\ndata.add(Arrays.asList("Sleep", 7));\nchart.setData(data);\n'})}),"\n",(0,s.jsx)(a.h3,{id:"using-maps-for-more-complex-structures",children:"Using maps for more complex structures"}),"\n",(0,s.jsx)(a.p,{children:"For more complex data structures, you can use maps to represent rows and then convert them into the required format."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:'List<Object> data = new ArrayList<>();\n\n// Header row\ndata.add(Arrays.asList("Country", "Revenue"));\n\n// Data rows\nMap<String, Object> row1 = Map.of("Country", "Germany", "Revenue", 1000);\nMap<String, Object> row2 = Map.of("Country", "United States", "Revenue", 1170);\nMap<String, Object> row3 = Map.of("Country", "Brazil", "Revenue", 660);\n\ndata.add(new ArrayList<>(row1.values()));\ndata.add(new ArrayList<>(row2.values()));\ndata.add(new ArrayList<>(row3.values()));\n\nchart.setData(data);\n'})}),"\n",(0,s.jsx)(a.p,{children:"Once the data is prepared, it can be applied to the GoogleChart using the setData method."}),"\n",(0,s.jsx)(t,{path:"https://demo.webforj.com/webapp/controlsamples/chartsettingdata?",javaE:"https://raw.githubusercontent.com/webforj/webforj-docs-samples/refs/heads/main/src/main/java/com/webforj/samples/views/googlecharts/ChartSettingDataView.java",height:"300px"}),"\n",(0,s.jsx)(a.h3,{id:"loading-data-and-options-from-json",children:"Loading data and options from JSON"}),"\n",(0,s.jsx)(a.p,{children:"You can also load data and options from JSON files using Gson for easier management. This approach helps keep your data and options organized and easy to update."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:'List<Object> data = new ArrayList<>();\ndata.add(Arrays.asList("Year", "Sales", "Expenses"));\ndata.add(Arrays.asList("2013", 1000, 400));\ndata.add(Arrays.asList("2014", 1170, 460));\ndata.add(Arrays.asList("2015", 660, null)); \ndata.add(Arrays.asList("2016", 1030, 540));\nchart.setData(data);\n\nMap<String, Object> options = new Gson().fromJson(\n    Assets.contentOf("options.json"),\n    new TypeToken<Map<String, Object>>() {}.getType()\n);\nchart.setOptions(options);\n'})}),"\n",(0,s.jsx)(a.h2,{id:"updating-chart-visuals",children:"Updating chart visuals"}),"\n",(0,s.jsxs)(a.p,{children:["Refreshing or updating the appearance of your charts in response to data changes, user interactions, or visual option adjustments is straightforward with the ",(0,s.jsx)(a.code,{children:"redraw()"})," method. This method ensures that your charts remain accurate and visually aligned with the underlying data or any modifications to their settings."]}),"\n",(0,s.jsxs)(a.p,{children:["Invoke ",(0,s.jsx)(a.code,{children:"redraw()"})," in scenarios such as:"]}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"After Data Modifications"}),": Ensures the chart reflects any updates to its data source."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Upon Changing Options"}),": Applies new styling or configuration changes to the chart."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"For Responsive Adjustments"}),": Adjusts the chart's layout or size when the container's dimensions change, ensuring optimal display across devices."]}),"\n"]}),"\n",(0,s.jsx)(t,{path:"https://demo.webforj.com/webapp/controlsamples/chartredraw?",javaE:"https://raw.githubusercontent.com/webforj/webforj-docs-samples/refs/heads/main/src/main/java/com/webforj/samples/views/googlecharts/ChartRedrawView.java",cssURL:"https://raw.githubusercontent.com/webforj/ControlSamples/main/src/main/resources/css/googlecharts/chartRedraw.css",height:"500px"}),"\n",(0,s.jsx)(a.h2,{id:"exporting-charts-as-images",children:"Exporting charts as images"}),"\n",(0,s.jsxs)(a.p,{children:["The ",(0,s.jsx)(a.code,{children:"getImageUri()"})," method provides a way to export your Google Charts as base64-encoded PNG images. This method is particularly useful for sharing charts outside the web environment, embedding them into emails or documents, or simply for archival purposes."]}),"\n",(0,s.jsxs)(a.p,{children:["Call ",(0,s.jsx)(a.code,{children:"getImageUri()"}),' on your chart instance after the chart has been fully rendered. Typically, this method is used within a "ready" event listener to ensure the chart is ready for export:']}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:"chart.addReadyListener(e -> {\n    String imageUri = chart.getImageUri();\n    // Now you can use the imageUri, for example, as the src attribute of an img tag\n});\n"})})]})}function h(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}function p(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>i});var s=t(6540);const o={},n=s.createContext(o);function r(e){const a=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(n.Provider,{value:a},e.children)}}}]);