"use strict";(self.webpackChunkdwcj_documentation=self.webpackChunkdwcj_documentation||[]).push([[5328],{6547:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>g,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var t=i(4848),o=i(8453);const l={sidebar_position:4,title:"Navigation Events"},a=void 0,r={id:"routing/navigation-lifecycle/navigation-events",title:"Navigation Events",description:"In addition to component-specific lifecycle events, you can register global event listeners at the router level. This allows for tracking navigation globally across the entire app, making it useful for logging, analytics, or other cross-cutting concerns.",source:"@site/docs/routing/navigation-lifecycle/navigation-events.md",sourceDirName:"routing/navigation-lifecycle",slug:"/routing/navigation-lifecycle/navigation-events",permalink:"/docs/routing/navigation-lifecycle/navigation-events",draft:!1,unlisted:!1,editUrl:"https://github.com/webforj/webforj-docs/tree/website/docs/routing/navigation-lifecycle/navigation-events.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Navigation Events"},sidebar:"documentationSidebar",previous:{title:"Navigation Blocking",permalink:"/docs/routing/navigation-lifecycle/navigation-blocking"},next:{title:"overview",permalink:"/docs/routing/route-hierarchy/overview"}},s={},c=[{value:"Example: Global navigation listener",id:"example-global-navigation-listener",level:3},{value:"Registering Global lifecycle event listeners",id:"registering-global-lifecycle-event-listeners",level:3},{value:"Example: Global <code>WillLeaveEvent</code> listener",id:"example-global-willleaveevent-listener",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["In addition to component-specific lifecycle events, you can register ",(0,t.jsx)(n.strong,{children:"global event listeners"})," at the router level. This allows for tracking navigation globally across the entire app, making it useful for logging, analytics, or other cross-cutting concerns."]}),"\n",(0,t.jsx)(n.h3,{id:"example-global-navigation-listener",children:"Example: Global navigation listener"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Router.getCurrent().addNavigateListener(event -> {\n  Location location = event.getLocation();\n  console().log("Navigated to: " + location.getFullURI());\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"In this example, a global listener is registered to log every navigation event in the app. This is useful for auditing or tracking page views."}),"\n",(0,t.jsx)(n.h3,{id:"registering-global-lifecycle-event-listeners",children:"Registering Global lifecycle event listeners"}),"\n",(0,t.jsx)(n.p,{children:"Global listeners can be attached to various lifecycle events, including:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"WillEnterEvent"})}),": Fired before any route's component is attached to the DOM."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"DidEnterEvent"})}),": Fired after a component is attached to the DOM."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"WillLeaveEvent"})}),": Fired before a component is detached from the DOM."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"DidLeaveEvent"})}),": Fired after a component is detached from the DOM."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"NavigateEvent"})}),": Fired every time navigation occurs."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Using Observers to Hook into Lifecycle Events",type:"tip",children:(0,t.jsxs)(n.p,{children:["You can also hook into the lifecycle events using observers. For more details, refer to the ",(0,t.jsx)(n.a,{href:"./observers",children:"Lifecycle Observers"}),"."]})}),"\n",(0,t.jsxs)(n.h3,{id:"example-global-willleaveevent-listener",children:["Example: Global ",(0,t.jsx)(n.code,{children:"WillLeaveEvent"})," listener"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Router.getCurrent().addWillLeaveListener(event -> {\n  ConfirmDialog.Result result = showConfirmDialog(\n      "Are you sure you want to leave this view?",\n      "Leave View",\n      ConfirmDialog.OptionType.OK_CANCEL,\n      ConfirmDialog.MessageType.WARNING);\n\n  event.veto(result == ConfirmDialog.Result.CANCEL);\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In this case, the ",(0,t.jsx)(n.code,{children:"WillLeaveEvent"})," is used globally to show a confirmation dialog before the user navigates away from any view."]})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var t=i(6540);const o={},l=t.createContext(o);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);