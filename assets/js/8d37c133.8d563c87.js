"use strict";(self.webpackChunkdwcj_documentation=self.webpackChunkdwcj_documentation||[]).push([[7155],{1650:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"routing/query-parameters","title":"Query Parameters","description":"Query parameters allow you to pass additional data through URLs, using the format ?key1=value1&key2=value2. While route parameters are used to pass required data within the URL path, query parameters provide a flexible mechanism for passing optional or additional data. They\'re especially useful when filtering content, sorting, or handling multiple values for the same key.","source":"@site/docs/routing/query-parameters.md","sourceDirName":"routing","slug":"/routing/query-parameters","permalink":"/docs/routing/query-parameters","draft":false,"unlisted":false,"editUrl":"https://github.com/webforj/webforj-docs/tree/website/docs/routing/query-parameters.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Query Parameters"},"sidebar":"documentationSidebar","previous":{"title":"Route Patterns","permalink":"/docs/routing/route-patterns"},"next":{"title":"State Management","permalink":"/docs/routing/state-management"}}');var a=t(4848),n=t(8453);const i={sidebar_position:6,title:"Query Parameters"},o=void 0,l={},d=[{value:"Query parameters overview",id:"query-parameters-overview",level:2},{value:"Retrieving query parameters",id:"retrieving-query-parameters",level:2},{value:"Handling multiple values for a query parameter",id:"handling-multiple-values-for-a-query-parameter",level:2},{value:"Use cases for query parameters",id:"use-cases-for-query-parameters",level:2}];function c(e){const r={admonition:"admonition",code:"code",h2:"h2",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(r.p,{children:["Query parameters allow you to pass additional data through URLs, using the format ",(0,a.jsx)(r.code,{children:"?key1=value1&key2=value2"}),". While route parameters are used to pass required data within the URL path, query parameters provide a flexible mechanism for passing optional or additional data. They're especially useful when filtering content, sorting, or handling multiple values for the same key."]}),"\n",(0,a.jsx)(r.h2,{id:"query-parameters-overview",children:"Query parameters overview"}),"\n",(0,a.jsxs)(r.p,{children:["Query parameters in webforJ follow the typical URL convention: key-value pairs separated by ",(0,a.jsx)(r.code,{children:"="})," and concatenated with ",(0,a.jsx)(r.code,{children:"&"}),". They're appended to the URL after a ",(0,a.jsx)(r.code,{children:"?"})," and provide a flexible way to pass optional data, such as filtering or sorting preferences."]}),"\n",(0,a.jsx)(r.p,{children:"For example:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{children:"/products?category=electronics&sort=price\n"})}),"\n",(0,a.jsx)(r.h2,{id:"retrieving-query-parameters",children:"Retrieving query parameters"}),"\n",(0,a.jsxs)(r.p,{children:["Query parameters are accessed through the ",(0,a.jsx)(r.code,{children:"ParametersBag"})," object. To retrieve query parameters, use the ",(0,a.jsx)(r.code,{children:"getQueryParameters()"})," method of the ",(0,a.jsx)(r.code,{children:"Location"})," object."]}),"\n",(0,a.jsx)(r.p,{children:"Here\u2019s how you can retrieve query parameters from a URL in a view:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:'@Route(value = "products")\npublic class ProductView extends Composite<Div> implements DidEnterObserver {\n\n  @Override\n  public void onDidEnter(DidEnterEvent event, ParametersBag parameters) {\n    ParametersBag queryParameters = event.getLocation().getQueryParameters();\n\n    String category = queryParameters.get("category").orElse("all");\n    String sort = queryParameters.get("sort").orElse("default");\n\n    console().log("Category: " + category);\n    console().log("Sort: " + sort);\n  }\n}\n'})}),"\n",(0,a.jsx)(r.p,{children:"In this example:"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:["The ",(0,a.jsx)(r.code,{children:"onDidEnter"})," method retrieves query parameters from the ",(0,a.jsx)(r.code,{children:"Location"})," object provided by the ",(0,a.jsx)(r.code,{children:"DidEnterEvent"}),"."]}),"\n",(0,a.jsxs)(r.li,{children:["The ",(0,a.jsx)(r.code,{children:"ParametersBag"})," allows you to retrieve specific query parameters using ",(0,a.jsx)(r.code,{children:"get()"}),", which returns an ",(0,a.jsx)(r.code,{children:"Optional<String>"}),". You can specify a default value using ",(0,a.jsx)(r.code,{children:"orElse()"})," if the parameter isn't present."]}),"\n"]}),"\n",(0,a.jsxs)(r.admonition,{type:"tip",children:[(0,a.jsxs)(r.mdxAdmonitionTitle,{children:[(0,a.jsx)(r.code,{children:"ParametersBag"})," getters"]}),(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(r.code,{children:"ParametersBag"})," provides several getter variations to help with casting the value of query parameters to specific types and filtering them. The following is the complete list of available getters:"]}),(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"get(String key)"})}),": Retrieves the value of the parameter as a ",(0,a.jsx)(r.code,{children:"String"}),"."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"getAlpha(String key)"})}),": Returns only alphabetic characters from the parameter value."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"getAlnum(String key)"})}),": Returns only alphanumeric characters from the parameter value."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"getDigits(String key)"})}),": Returns only the numeric digits from the parameter value."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"getInt(String key)"})}),": Parses and returns the parameter value as an ",(0,a.jsx)(r.code,{children:"Integer"}),"."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"getFloat(String key)"})}),": Parses and returns the parameter value as a ",(0,a.jsx)(r.code,{children:"Float"}),"."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"getDouble(String key)"})}),": Parses and returns the parameter value as a ",(0,a.jsx)(r.code,{children:"Double"}),"."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.code,{children:"getBoolean(String key)"})}),": Parses and returns the parameter value as a ",(0,a.jsx)(r.code,{children:"Boolean"}),"."]}),"\n"]}),(0,a.jsx)(r.p,{children:"These methods help you ensure the values are formatted and cast correctly, avoiding the need for manual parsing or validation."})]}),"\n",(0,a.jsx)(r.h2,{id:"handling-multiple-values-for-a-query-parameter",children:"Handling multiple values for a query parameter"}),"\n",(0,a.jsx)(r.p,{children:"Sometimes a query parameter might have multiple values for the same key, like in the following example:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{children:"/products?category=electronics,appliances&sort=price\n"})}),"\n",(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(r.code,{children:"ParametersBag"})," provides a method to handle this by retrieving values as a list:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:'@Route(value = "products")\npublic class ProductView extends Composite<Div> implements DidEnterObserver {\n\n  @Override\n  public void onDidEnter(DidEnterEvent event, ParametersBag parameters) {\n    ParametersBag queryParameters = event.getLocation().getQueryParameters();\n\n    List<String> categories = queryParameters.getList("category").orElse(List.of("all"));\n    String sort = queryParameters.get("sort").orElse("default");\n\n    console().log("Categories: " + categories);\n    console().log("Sort: " + sort);\n  }\n}\n'})}),"\n",(0,a.jsx)(r.p,{children:"In this example:"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:'getList("category")'})," retrieves all values associated with the ",(0,a.jsx)(r.code,{children:"category"})," key, returning them as a list."]}),"\n"]}),"\n",(0,a.jsx)(r.admonition,{title:"Multiple Values Delimiter",type:"tip",children:(0,a.jsxs)(r.p,{children:["By default, the ",(0,a.jsx)(r.code,{children:"getList()"})," method uses a comma (",(0,a.jsx)(r.code,{children:","}),") as the delimiter. You can customize the delimiter by passing a different character or a regular expression as second parameter to the ",(0,a.jsx)(r.code,{children:"getList(String key, String regex)"})," method."]})}),"\n",(0,a.jsx)(r.h2,{id:"use-cases-for-query-parameters",children:"Use cases for query parameters"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Filtering content"}),": Query parameters are often used to apply filters, like categories or search keywords."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Sorting data"}),": You can pass sorting preferences via query parameters, such as sorting by price, rating, or date."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Handling optional parameters"}),": When you need to pass data that isn't part of the required route structure, query parameters offer flexibility."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Passing multiple values"}),": Query parameters allow you to send multiple values for a single key, which is useful when users select multiple options, like product categories or filters."]}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>o});var s=t(6540);const a={},n=s.createContext(a);function i(e){const r=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(n.Provider,{value:r},e.children)}}}]);